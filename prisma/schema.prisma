// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  hashedPassword String
  nickName String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs Job[]
  chats Chat[]
  tasks Task[]
  notices Notice[]
}

// 取り消し通知実装
model Notice {
  id Int @id @default(autoincrement())
  jobId Int?
  applicantId Int
  recruiterId Int
  userId Int
  user User @relation(fields: [userId], references: [id])  
  job Job? @relation(fields: [jobId], references: [id], onDelete: SetNull)  
  read Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id Int @id @default(autoincrement())
  location String
  startDate DateTime
  endDate DateTime
  price Int
  description String?
  userId Int
  applicants Int[]
  acceptedId Int?
  rejectedIds Int[]
  done Int[]
  user User @relation(fields: [userId], references: [id])  
  notice Notice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id Int @id @default(autoincrement())
  roomNum Int
  text String
  userId Int
  user User @relation(fields: [userId], references: [id])  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  description String?
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  
}